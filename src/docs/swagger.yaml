openapi: 3.0.0
info:
  title: Express API
  version: 1.0.0
servers:
  - url: /api/v1
    description: Base API URL

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

tags:
  - name: Auth
    description: Authentication related endpoints
  - name: Users
    description: Users related endpoints
  - name: Follow
    description: Follow related endpoints
  - name: Posts
    description: Posts related endpoints
  - name: Likes
    description: Likes related endpoints

paths:
  /auth/register:
  register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - name
                - password
                - email
              properties:
                name:
                  type: string
                password:
                  type: string
                email:
                  type: string
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: User registered successfully
        "400":
          description: Validation error
        "500":
          description: Internal server error
  /auth/login:
  login:
    post:
      summary: Login and get tokens
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Successful login, returns tokens
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        "400":
          description: Invalid email or password

  refresh:
    post:
      summary: Refresh access token
      tags: [Auth]
      description: |
        Refresh the access token by sending the refresh token in a cookie.
        The cookie must be named `refreshToken`.
      parameters:
        - in: cookie
          name: refreshToken
          schema:
            type: string
          required: true
          description: The refresh token stored in the browser's cookie
      responses:
        "200":
          description: Successfully refreshed access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
        "403":
          description: No token provided
        "401":
          description: You are not allowed

  logout:
    delete:
      summary: Logout user
      tags: [Auth]
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successfully logged out

  /users:
    get:
      summary: Get all users
      tags: [Users]
      responses:
        "200":
          description: A list of users

  /users/name:
    get:
      summary: Get user by name
      tags:
        - Users
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: name
          required: ture
          description: The name of the user
          schema:
            type: string
      responses:
        200:
          description: Users found
        400:
          description: No user by that name

  /users/me:
    patch:
      summary: Update the current user
      tags: [Users]
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
      responses:
        200:
          description: Username updated successfully
        401:
          description: Unauthorized

  /users/{id}:
    get:
      summary: Get user by ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the user
          schema:
            type: integer
      responses:
        200:
          description: User found
        404:
          description: User not found

  /users/{id}/followers:
    get:
      summary: Get all followers of user by ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the user
          schema:
            type: integer
      responses:
        200:
          description: List of followers

  /users/{id}/followings:
    get:
      summary: Get all followings of user by ID
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          description: The ID of the user
          schema:
            type: integer
      responses:
        200:
          description: List of followings

  /users/profile-picture:
    patch:
      summary: Change the user's profile picture
      tags: [Users]
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
              required:
                - image
      responses:
        200:
          description: Profile picture update successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                      imageUrl:
                        type: string

  /users/{email}/getByEmail:
    get:
      summary: Get user by email
      tags: [Users]
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: email
          required: true
          description: The email of the user
          schema:
            type: string
      responses:
        200:
          description: User found
        404:
          description: User not found

  /following/me:
    get:
      summary: Get all following of me
      tags: [Follow]
      security:
        - bearerAuth: []
      responses:
        200:
          description: A list of users

  /followers/me:
    get:
      summary: Get all followers of me
      tags: [Follow]
      security:
        - bearerAuth: []
      responses:
        200:
          description: A list of users

  /followers/{id}:
    get:
      summary: Get all user followers
      tags: [Follow]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: A list of users

  /following/{id}:
    get:
      summary: Get all user following
      tags: [Follow]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: A list of users

  /follow/{id}:
    post:
      summary: Follow user
      tags: [Follow]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Followed successfully

  /unfollow/{id}:
    delete:
      summary: Unfollow user
      tags: [Follow]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Unfollowed successfully

  /posts:
    post:
      summary: Create post
      tags: [Posts]
      security:
        - bearerAuth: []
      responses:
      200:
        description: Post details

  /posts/{id}:
    delete:
      summary: Delete Post by id
      tags: [Posts]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Post was deleted successfully

    patch:
      summary: Update post by id
      tags: [Posts]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: New Post details

  /likes/react/{id}:
    post:
      summary: Toggle like
      tags: [Likes]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: type integer
      responses:
        200:
          description: Liked or Disliked

  /likes/{id}:
    get:
      summary: Get all likes of post
      tags: [Likes]
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema: type integer
      responses:
        200:
          description: List of users who liked the post
